{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","res","jsonRes","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAUeA,G,MARA,SAACC,GACf,OACC,4BAAQC,UAAU,cACjB,4BAAKD,EAAME,SCeCC,EAhBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACVC,EAA0B,QAAjBD,EAAME,OAHY,qGAGmCF,EAAME,OAE1E,OACC,yBAAKL,UAAU,SACd,4BAAKG,EAAMG,OACX,6BACC,yBAAKC,MAAM,MAAMC,IAAG,4BAAuBL,EAAMG,OAChDG,IAAKL,KAEP,+BAAKD,EAAMO,KAAX,OCcYC,EA1BA,SAACZ,GAAW,IAAD,EACaa,mBAAS,IADtB,mBAClBC,EADkB,KACLC,EADK,KAczB,OACC,0BAAMd,UAAU,UACf,2BACCe,MAAOF,EACPG,SAf8B,SAACC,GACjCH,EAAeG,EAAEC,OAAOH,QAetBI,KAAK,SAEN,2BAAOA,KAAK,SAASC,QAZI,SAACH,GAC3BA,EAAEI,iBACFtB,EAAMuB,OAAOT,GAJbC,EAAe,KAcoCC,MAAM,a,yjBClB3D,IAAMQ,EAAgB,oDAChBC,EAAe,CACpBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAEf,SAASC,EAAQC,EAAOC,GACvB,OAAQA,EAAOX,MACd,IAAK,aACJ,OAAO,EAAP,GACIU,EADJ,CAECJ,SAAS,IAEX,IAAK,gBACJ,OAAO,EAAP,GACII,EADJ,CAECJ,SAAS,EACTC,OAAQI,EAAOJ,SAEjB,IAAK,cACJ,OAAO,EAAP,GACIG,EADJ,CAECJ,SAAS,EACTE,aAAcG,EAAOC,QAEvB,QACC,OAAOF,GAuDKG,MApDf,WAAgB,IAAD,EAEYC,qBAAWL,EAASJ,GAFhC,mBAEPK,EAFO,KAEAK,EAFA,KAIdC,qBAAU,WACTC,MAAMb,GACJc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACLN,EAAS,CACRf,KAAM,gBACNO,OAAQc,EAAa7B,cAGtB,IAEH,IAoBQe,EAAkCG,EAAlCH,OAAQD,EAA0BI,EAA1BJ,QAASE,EAAiBE,EAAjBF,aACzB,OACC,yBAAK3B,UAAU,OACd,kBAAC,EAAD,CAAQC,KAAK,cACb,kBAAC,EAAD,CAAQqB,OAxBK,SAAAT,GACdqB,EAAS,CACRf,KAAM,eAEPiB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACHwB,MAAK,SAAAI,GAAG,OAAIA,EAAIF,UAChBF,MAAK,SAAAK,GACoB,SAArBA,EAAQC,SACXT,EAAS,CACRf,KAAM,gBACNO,OAAQgB,EAAQ/B,SAGjBuB,EAAS,CACRf,KAAM,cACNY,MAAOW,EAAQE,cAUlB,uBAAG5C,UAAU,aAAb,2DACA,yBAAKA,UAAU,UACbyB,IAAYE,EAAgB,4CAC5BA,EAAgB,yBAAK3B,UAAU,gBAAgB2B,GAC7CD,EAAOmB,KAAI,SAAC1C,EAAO2C,GAAR,OACX,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc3C,EAAMG,OAASH,MAAOA,UCnEjC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.6ed96953.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n\treturn (\n\t\t<header className=\"App-header\">\n\t\t\t<h2>{props.text}</h2>\n\t\t</header>\n\t);\n};\n\nexport default Header;","import React from 'react';\n\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\nconst Movie = ({ movie }) => {\n\tconst poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n\n\treturn (\n\t\t<div className=\"movie\">\n\t\t\t<h2>{movie.Title}</h2>\n\t\t\t<div>\n\t\t\t\t<img width=\"200\" alt={`The movie titled: ${movie.Title}`}\n\t\t\t\t\tsrc={poster} />\n\t\t\t</div>\n\t\t\t<p>({movie.Year})</p>\n\n\t\t</div>\n\t);\n};\n\nexport default Movie;","import React, { useState } from 'react';\n\nconst Search = (props) => {\n\tconst [searchValue, setSearchValue] = useState(\"\")\n\n\tconst handleSearchInputChanges = (e) => {\n\t\tsetSearchValue(e.target.value);\n\t}\n\tconst resetInputField = () => {\n\t\tsetSearchValue(\"\")\n\t}\n\tconst callSearchFunction = (e) => {\n\t\te.preventDefault();\n\t\tprops.search(searchValue);\n\t\tresetInputField();\n\t}\n\treturn (\n\t\t<form className=\"search\">\n\t\t\t<input\n\t\t\t\tvalue={searchValue}\n\t\t\t\tonChange={handleSearchInputChanges}\n\t\t\t\ttype=\"text\"\n\t\t\t/>\n\t\t\t<input type=\"submit\" onClick={callSearchFunction} value=\"SEARCH\" />\n\t\t</form>\n\t)\n}\n\nexport default Search;","import React, { useReducer, useEffect } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Movie from './Movie';\nimport Search from './Search';\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=jackie&apikey=5abd63d1\";\nconst initialState = {\n\tloading: true,\n\tmovies: [],\n\terrorMessage: null\n}\nfunction reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'requesting':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true\n\t\t\t};\n\t\tcase 'query_success':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tmovies: action.movies\n\t\t\t};\n\t\tcase 'query_error':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: action.error\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\nfunction App() {\n\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tuseEffect(() => {\n\t\tfetch(MOVIE_API_URL)\n\t\t\t.then(response => response.json())\n\t\t\t.then(jsonResponse => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: \"query_success\",\n\t\t\t\t\tmovies: jsonResponse.Search\n\t\t\t\t})\n\t\t\t});\n\t}, []);\n\n\tconst search = searchValue => {\n\t\tdispatch({\n\t\t\ttype: \"requesting\"\n\t\t})\n\t\tfetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=5abd63d1`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(jsonRes => {\n\t\t\t\tif (jsonRes.Response === \"True\") {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"query_success\",\n\t\t\t\t\t\tmovies: jsonRes.Search\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"query_error\",\n\t\t\t\t\t\terror: jsonRes.Error\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n\tconst { movies, loading, errorMessage } = state;\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header text=\"Movie App\" />\n\t\t\t<Search search={search} />\n\t\t\t<p className=\"App-intro\">分享快乐,从电影开始</p>\n\t\t\t<div className=\"movies\">\n\t\t\t\t{loading && !errorMessage ? (<span>loading...</span>) :\n\t\t\t\t\terrorMessage ? (<div className=\"errorMessage\">{errorMessage}</div>) :\n\t\t\t\t\t\t(movies.map((movie, index) => (\n\t\t\t\t\t\t\t<Movie key={`${index}-${movie.Title}`} movie={movie} />\n\t\t\t\t\t\t)))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// class component\n// import App from './components/AppClass';\n// functional component\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}